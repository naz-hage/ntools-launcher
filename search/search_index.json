{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ntools-launcher The ntools-launcher is a NuGet package library that simplifies common tasks related to launching executables, downloading files, executing shell commands, and checking process elevation. This library is designed to be easy to use, while providing robust functionality for a variety of tasks. Boost your productivity with ntools-launcher , automating common development tasks, including: Launching executables directly from your code. Downloading files securely with ease. Executing shell commands for automated scripting. Checking process elevation for enhanced security awareness. Key benefits Improved Efficiency: Automate repetitive tasks and focus on core development activities. Simplified Workflow: User-friendly API streamlines integration into your projects. Enhanced Control: Manage processes and ensure proper elevation levels for secure development. This library is used by the ntools's repo Nbackup launches robocopy and wait for it to complete, ensuring that the backup process is fully completed before the program continues. Nbuild launches msbuild to build and test .NET projects. It also builds selected development tools for the project. It utilizes the NFile class to download the tools from the web. Ngit launches git to perform git operations. Features Launcher: A class with methods to launch a process and wait for it to complete. This includes methods for locking a file and verifying its digital signature before launching, and launching a process in a separate thread. ResultHelper: A helper class for retrieving the result Code and Output of the launched executable. NFile: A class with a method for downloading files from the web. This method for checks Web download Url integrity, the downloaded file signature, file size, and VirusTotal check. ResultDownload: A helper class for retrieving the result of a downloaded file. CurrentProcess: A class that provides a method to determine if the current process is elevated. ShellUtility: A helper class for executing shell commands and retrieving the full path of a file from the Path environment variable.","title":"Overview"},{"location":"#_1","text":"","title":""},{"location":"#ntools-launcher","text":"The ntools-launcher is a NuGet package library that simplifies common tasks related to launching executables, downloading files, executing shell commands, and checking process elevation. This library is designed to be easy to use, while providing robust functionality for a variety of tasks. Boost your productivity with ntools-launcher , automating common development tasks, including: Launching executables directly from your code. Downloading files securely with ease. Executing shell commands for automated scripting. Checking process elevation for enhanced security awareness.","title":"ntools-launcher"},{"location":"#key-benefits","text":"Improved Efficiency: Automate repetitive tasks and focus on core development activities. Simplified Workflow: User-friendly API streamlines integration into your projects. Enhanced Control: Manage processes and ensure proper elevation levels for secure development. This library is used by the ntools's repo Nbackup launches robocopy and wait for it to complete, ensuring that the backup process is fully completed before the program continues. Nbuild launches msbuild to build and test .NET projects. It also builds selected development tools for the project. It utilizes the NFile class to download the tools from the web. Ngit launches git to perform git operations.","title":"Key benefits"},{"location":"#features","text":"Launcher: A class with methods to launch a process and wait for it to complete. This includes methods for locking a file and verifying its digital signature before launching, and launching a process in a separate thread. ResultHelper: A helper class for retrieving the result Code and Output of the launched executable. NFile: A class with a method for downloading files from the web. This method for checks Web download Url integrity, the downloaded file signature, file size, and VirusTotal check. ResultDownload: A helper class for retrieving the result of a downloaded file. CurrentProcess: A class that provides a method to determine if the current process is elevated. ShellUtility: A helper class for executing shell commands and retrieving the full path of a file from the Path environment variable.","title":"Features"},{"location":"installation/","text":"Installation The ntools-launcher package is available on nuget.org. To install the package, run the following command in the Package Manager Console: Install-Package ntools-launcher","title":"Installation"},{"location":"installation/#installation","text":"The ntools-launcher package is available on nuget.org. To install the package, run the following command in the Package Manager Console: Install-Package ntools-launcher","title":"Installation"},{"location":"usage/","text":"Usage Launcher Class The Launcher class provides methods for launching a process. This includes methods for locking a file and verifying its digital signature before launching, and launching a process in a separate thread. Here's an example of how to use the Launcher class: using Ntools; var process = new Process { StartInfo = new ProcessStartInfo { WorkingDirectory = Environment.GetFolderPath(Environment.SpecialFolder.System), FileName = \"robocopy.exe\", Arguments = \"/?\", RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false } }; var result = process.LockStart(true); if (result.IsSuccess()) { Console.WriteLine(\"Success\"); } else { Console.WriteLine($\"Code: {result.Code}\"); foreach (var line in result.Output) { Console.WriteLine(line); } } The Launcher class exposes LockVerifyStart method which is useful in scenarios where you need to start a process and verify that the file is digitally signed before launching. Here are some scenarios where you might use this method: Securely launching executables : If you need to start an executable and want to ensure that it is digitally signed before launching, you can use this function to verify the digital signature of the file before starting the process. Preventing unauthorized executables : In scenarios where you want to prevent unauthorized executables from running on your system, you can use this function to verify the digital signature of the file before launching it. NFile Class The NFile class provides a method for downloading files from the web. Here's an example of how to use the NFile class: using Ntools; try { // It is assumed that the VirusTotal API key is stored in the environment variable // VTAPIKEY. The key is used to check the downloaded file for virus. var result = await NFile.DownloadAsync(\"https://example.com/file.zip\", \"C:\\\\temp\\\\file.zip\"); if (result.IsSuccess()) { Console.WriteLine(\"Success\"); } else { Console.WriteLine($\"Code: {result.Code}\"); Console.WriteLine($\"Message: {result.Message}\"); } } catch (Exception ex) { Console.WriteLine(ex.Message); } The DownloadAsync method is useful in scenarios where you need to download a file from the web. Here are some scenarios where you might use this method: Downloading files from the web : If you need to download a file from the web, you can use this function to do so. Checking for virus : In scenarios where you want to check the downloaded file for viruses, you can use this function to download the file and then check it using a virus scanning service such as VirusTotal. Verifying file signature : If you need to verify the digital signature of the downloaded file, you can use this function to do so. ShellUtility Class The ShellUtility class provides a method for retrieving the full path of a file from the Path environment variable. Here's an example of how to use the ShellUtility class: using Ntools; var fullPath = ShellUtility.GetFullPathOfFile(\"notepad.exe\"); Console.WriteLine(fullPath); CurrentProcess Class The CurrentProcess class provides a method to determine if the current process is elevated. Here's an example of how to use the CurrentProcess class: using Ntools; var isElevated = CurrentProcess.IsElevated(); Console.WriteLine(isElevated);","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#launcher-class","text":"The Launcher class provides methods for launching a process. This includes methods for locking a file and verifying its digital signature before launching, and launching a process in a separate thread. Here's an example of how to use the Launcher class: using Ntools; var process = new Process { StartInfo = new ProcessStartInfo { WorkingDirectory = Environment.GetFolderPath(Environment.SpecialFolder.System), FileName = \"robocopy.exe\", Arguments = \"/?\", RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false } }; var result = process.LockStart(true); if (result.IsSuccess()) { Console.WriteLine(\"Success\"); } else { Console.WriteLine($\"Code: {result.Code}\"); foreach (var line in result.Output) { Console.WriteLine(line); } } The Launcher class exposes LockVerifyStart method which is useful in scenarios where you need to start a process and verify that the file is digitally signed before launching. Here are some scenarios where you might use this method: Securely launching executables : If you need to start an executable and want to ensure that it is digitally signed before launching, you can use this function to verify the digital signature of the file before starting the process. Preventing unauthorized executables : In scenarios where you want to prevent unauthorized executables from running on your system, you can use this function to verify the digital signature of the file before launching it.","title":"Launcher Class"},{"location":"usage/#nfile-class","text":"The NFile class provides a method for downloading files from the web. Here's an example of how to use the NFile class: using Ntools; try { // It is assumed that the VirusTotal API key is stored in the environment variable // VTAPIKEY. The key is used to check the downloaded file for virus. var result = await NFile.DownloadAsync(\"https://example.com/file.zip\", \"C:\\\\temp\\\\file.zip\"); if (result.IsSuccess()) { Console.WriteLine(\"Success\"); } else { Console.WriteLine($\"Code: {result.Code}\"); Console.WriteLine($\"Message: {result.Message}\"); } } catch (Exception ex) { Console.WriteLine(ex.Message); } The DownloadAsync method is useful in scenarios where you need to download a file from the web. Here are some scenarios where you might use this method: Downloading files from the web : If you need to download a file from the web, you can use this function to do so. Checking for virus : In scenarios where you want to check the downloaded file for viruses, you can use this function to download the file and then check it using a virus scanning service such as VirusTotal. Verifying file signature : If you need to verify the digital signature of the downloaded file, you can use this function to do so.","title":"NFile Class"},{"location":"usage/#shellutility-class","text":"The ShellUtility class provides a method for retrieving the full path of a file from the Path environment variable. Here's an example of how to use the ShellUtility class: using Ntools; var fullPath = ShellUtility.GetFullPathOfFile(\"notepad.exe\"); Console.WriteLine(fullPath);","title":"ShellUtility Class"},{"location":"usage/#currentprocess-class","text":"The CurrentProcess class provides a method to determine if the current process is elevated. Here's an example of how to use the CurrentProcess class: using Ntools; var isElevated = CurrentProcess.IsElevated(); Console.WriteLine(isElevated);","title":"CurrentProcess Class"},{"location":"devguide/build-and-test/","text":"Build and Test The project is built and tested using the NTools Standardized build tools. The Nb tool is used to build msbuild targets defined in the nbuild.targets file. To build and test Open a Developer command prompt for VS 2022 Run the following command in directory of the solution to create a local build to deploy and test: nb staging Run the following command in directory of the solution to list the available build targets: nb -c targets The targets file contains the list of available targets.","title":"Build and Test"},{"location":"devguide/build-and-test/#build-and-test","text":"The project is built and tested using the NTools Standardized build tools. The Nb tool is used to build msbuild targets defined in the nbuild.targets file. To build and test Open a Developer command prompt for VS 2022 Run the following command in directory of the solution to create a local build to deploy and test: nb staging Run the following command in directory of the solution to list the available build targets: nb -c targets The targets file contains the list of available targets.","title":"Build and Test"},{"location":"devguide/dependencies/","text":"Project Dependencies This project depends on the developer to have a valid VirusTotal API key. The key is used to check the downloaded file for virus. The key is stored in the environment variable VTAPIKEY . The key is used by the NFile class to check the downloaded file for virus. Use the following command to set the environment variable: setx VTAPIKEY \"your_valid_virustotal_api_key\"","title":"Project Dependencies"},{"location":"devguide/dependencies/#project-dependencies","text":"This project depends on the developer to have a valid VirusTotal API key. The key is used to check the downloaded file for virus. The key is stored in the environment variable VTAPIKEY . The key is used by the NFile class to check the downloaded file for virus. Use the following command to set the environment variable: setx VTAPIKEY \"your_valid_virustotal_api_key\"","title":"Project Dependencies"},{"location":"devguide/setup/","text":"Development Environment Setup The project is built using the NTools Standardized build tools. To setup the development environment Open a powershell in administrator mode Run the following commands in the dev-setup directory of the solution: cd dev-setup .\\dev-setup.ps1","title":"Environment Setup"},{"location":"devguide/setup/#development-environment-setup","text":"The project is built using the NTools Standardized build tools. To setup the development environment Open a powershell in administrator mode Run the following commands in the dev-setup directory of the solution: cd dev-setup .\\dev-setup.ps1","title":"Development Environment Setup"},{"location":"devguide/targets/","text":"Target Name Description CURRENT_DIRECTORY Define current solution folder ARTIFACTS Setup the ARTIFACTS folders for binaries and test results - override NUGET_DEP Define Nuget Package dependencies NUGET_PACK Create and Publish a Nuget package to the local Package feed NUGET_PUBLISH Create and Publish a Nuget package to the public feed MKDOCS Build docs locally for testing","title":"Targets"},{"location":"revisions/changelog/","text":"Latest Release Version 1.6.0 - 14-nov-24 issue #14 - Feature: Publish documentation using mkdocs issue #17 - Bug:Microsoft Security Advisory CVE-2024-43485 | .NET Denial of Service Vulnerability issue #21 - Feature: Update Target Frameworks to 9.0 and Package References Version 1.5.0 - 29-feb-24 Add DownloadAsync method to download file from the web. The method uses the VirusTotal API to check the downloaded file for virus. The method returns a ResultDownload object that details the download result such as file signature, file size, and VirusTotal check. Version 1.2.0 - 28-jan-24 Version 1.1.0 - 25-jan-24 Add lock file to prevent file being changed before it is launched. If file cannot be locked, then it is not launched. An error is returned. After returning from launch , the file is unlocked. Add option to check for digital signature of file. If file is not signed, then it is not launched. An error is returned. Digital signature check is only performed when the file is locked. Version 1.0.18 - jan-24 Initial release Nuget package release.","title":"Changelog"},{"location":"revisions/changelog/#latest-release","text":"","title":"Latest Release"},{"location":"revisions/changelog/#version-160-14-nov-24","text":"issue #14 - Feature: Publish documentation using mkdocs issue #17 - Bug:Microsoft Security Advisory CVE-2024-43485 | .NET Denial of Service Vulnerability issue #21 - Feature: Update Target Frameworks to 9.0 and Package References","title":"Version 1.6.0 - 14-nov-24"},{"location":"revisions/changelog/#version-150-29-feb-24","text":"Add DownloadAsync method to download file from the web. The method uses the VirusTotal API to check the downloaded file for virus. The method returns a ResultDownload object that details the download result such as file signature, file size, and VirusTotal check.","title":"Version 1.5.0 - 29-feb-24"},{"location":"revisions/changelog/#version-120-28-jan-24","text":"","title":"Version 1.2.0 - 28-jan-24"},{"location":"revisions/changelog/#version-110-25-jan-24","text":"Add lock file to prevent file being changed before it is launched. If file cannot be locked, then it is not launched. An error is returned. After returning from launch , the file is unlocked. Add option to check for digital signature of file. If file is not signed, then it is not launched. An error is returned. Digital signature check is only performed when the file is locked.","title":"Version 1.1.0 - 25-jan-24"},{"location":"revisions/changelog/#version-1018-jan-24","text":"Initial release Nuget package release.","title":"Version 1.0.18 - jan-24"}]}